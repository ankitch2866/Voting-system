from flask import Flask, request, jsonify
from web3 import Web3

app = Flask(__name__)

# Connect to Ganache blockchain
ganache_url = "http://127.0.0.1:7545"
web3 = Web3(Web3.HTTPProvider(ganache_url))

if not web3.isConnected():
    print("Error: Unable to connect to Ganache.")
    exit()

# Set the default account for transactions
web3.eth.default_account = web3.eth.accounts[0]

# Contract details (update with actual values)
contract_address = "0xYourContractAddressHere"
abi = [
    # Replace with ABI JSON generated by the Solidity compiler
]

# Load the contract
voting_contract = web3.eth.contract(address=contract_address, abi=abi)

@app.route("/register", methods=["POST"])
def register_voter():
    data = request.json
    voter_address = data.get("address")

    # Logic for registering voter (if applicable in contract)
    try:
        # Example transaction (replace with actual contract function)
        txn_hash = voting_contract.functions.registerVoter(voter_address).transact()
        web3.eth.waitForTransactionReceipt(txn_hash)
        return jsonify({"message": "Voter registered successfully."}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 400

@app.route("/vote", methods=["POST"])
def cast_vote():
    data = request.json
    voter_address = data.get("address")
    candidate_id = data.get("candidate_id")

    try:
        # Example transaction
        txn_hash = voting_contract.functions.vote(candidate_id).transact({"from": voter_address})
        web3.eth.waitForTransactionReceipt(txn_hash)
        return jsonify({"message": "Vote cast successfully."}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 400

@app.route("/results", methods=["GET"])
def get_results():
    try:
        candidates_count = voting_contract.functions.candidatesCount().call()
        results = []

        for i in range(1, candidates_count + 1):
            candidate = voting_contract.functions.candidates(i).call()
            results.append({
                "id": candidate[0],
                "name": candidate[1],
                "vote_count": candidate[2]
            })

        return jsonify(results), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 400

if __name__ == "__main__":
    app.run(debug=True)
